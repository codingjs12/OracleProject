-- STUDENT, ENROL, SUBJECT
SELECT *
FROM STUDENT;

SELECT *
FROM ENROL;

SELECT *
FROM SUBJECT;

-- 1. 성이 '김'씨인 학생들의 학번, 이름, 학과를 출력하시오.
SELECT STU_NO, STU_NAME, STU_DEPT
FROM STUDENT
WHERE STU_NAME LIKE '김%';

-- 2. 15학번 학생들의 학번, 이름, 학과를 출력하시오.
SELECT STU_NO, STU_NAME, STU_DEPT
FROM STUDENT
WHERE STU_NO LIKE '2015%';

SELECT STU_NO, STU_NAME, STU_DEPT
FROM STUDENT
WHERE SUBSTR(STU_NO, 3, 2) = 15;

-- 3. 컴퓨터정보 학과 학생들의 시험 평균 점수를 구하시오.
SELECT AVG(ENR_GRADE), STU_DEPT
FROM STUDENT S
INNER JOIN ENROL E ON S.STU_NO = E.STU_NO
WHERE STU_DEPT = '컴퓨터정보'
GROUP BY STU_DEPT;

-- 4. 컴퓨터개론 수업을 듣는 학생의 학번, 이름, 학과, 시험점수를 구하시오.
SELECT S.STU_NO, S.STU_NAME, S.STU_DEPT, ENR_GRADE, SUB_NAME
FROM STUDENT S
INNER JOIN ENROL E ON S.STU_NO = E.STU_NO
INNER JOIN SUBJECT SUB ON E.SUB_NO = SUB.SUB_NO
WHERE SUB.SUB_NAME = '컴퓨터개론';

-- 5. 학생들의 전체 평균 키보다 큰 키를 가진 학생들의 학번, 이름, 키를 출력하시오.
SELECT AVG(STU_HEIGHT)
FROM STUDENT;

SELECT STU_NAME, STU_NO, STU_HEIGHT, STU_DEPT
FROM STUDENT S
WHERE (
    SELECT AVG(STU_HEIGHT)
    FROM STUDENT
) < STU_HEIGHT;

-- 6. 본인 학과의 평균 키보다 큰 학생들의 이름, 학과, 키, 학과 평균키 값 출력
SELECT ROUND(AVG(STU_HEIGHT), 2), STU_DEPT
FROM STUDENT
GROUP BY STU_DEPT;

SELECT STU_NO, STU_NAME, S.STU_DEPT, STU_HEIGHT, AVG_DEPT
FROM STUDENT S
INNER JOIN (
    SELECT ROUND(AVG(STU_HEIGHT),2) AS AVG_DEPT, STU_DEPT
    FROM STUDENT
    GROUP BY STU_DEPT
) T ON T.STU_DEPT = S.STU_DEPT
WHERE STU_HEIGHT > AVG_DEPT;

-- EMP, SALGRADE, DEPT
SELECT *
FROM EMP;

SELECT *
FROM SALGRADE;

SELECT *
FROM DEPT;

-- 1. 급여 등급이 3이상인 사원의 사번, 이름, 급여등급을 출력하시오.
SELECT EMPNO, ENAME, GRADE
FROM EMP E
INNER JOIN SALGRADE S ON E.SAL BETWEEN S.LOSAL AND S.HISAL
WHERE GRADE >= 3;

-- 2. 사번, 이름, 팀장(MGR)의 이름을 출력하시오.
SELECT E1.ENAME, E2.ENAME
FROM EMP E1
INNER JOIN EMP E2 ON E1.MGR = E2.EMPNO;
-- 3. 부서별 가장 높은 급여를 받는 사원의 사번, 이름, 급여, 부서명을 출력하시오.

SELECT EMPNO, ENAME, SAL, DNAME
FROM EMP E
INNER JOIN DEPT D ON E.DEPTNO = D.DEPTNO
INNER JOIN (
    SELECT MAX(SAL) AS MAX_SAL, DEPTNO
    FROM EMP
    GROUP BY DEPTNO
) T ON D.DEPTNO = T.DEPTNO
WHERE MAX_SAL = SAL;

-- 4. 입사년도가 1981년도인 사원들의 급여 총합을 구하시오.
SELECT SUM(SAL), TO_CHAR(HIREDATE, 'YYYY')
FROM EMP E
WHERE TO_CHAR(HIREDATE, 'YYYY') = '1981'
GROUP BY TO_CHAR(HIREDATE, 'YYYY');


-- STU, PROFESSOR, DEPARTMENT

SELECT * FROM STU;
SELECT * FROM PROFESSOR;
SELECT * FROM DEPARTMENT;

-- 1. 남자이면서(주민번호 7번째자리 1) 공과대학에 속한 학생의 수를 구하시오.
SELECT SUBSTR(JUMIN, 7, 1), NAME
FROM STU
WHERE SUBSTR(JUMIN, 7, 1) = '1';

SELECT COUNT(*)
FROM STU S
INNER JOIN DEPARTMENT D1 ON S.DEPTNO1 = D1.DEPTNO
INNER JOIN DEPARTMENT D2 ON D1.PART = D2.DEPTNO
INNER JOIN DEPARTMENT D3 ON D2.PART = D3.DEPTNO
WHERE SUBSTR(JUMIN, 7, 1) = '1' AND D3.DNAME = '공과대학';

-- 2. 학생들의 아이디의 마지막 세글자를 '*' 로 채우시오
SELECT ID
FROM STU;

SELECT RPAD(SUBSTR(ID, 1, LENGTH(ID)-3), LENGTH(ID), '*') AS ID
FROM STU;

SELECT RPAD(ID, 10, '*')
FROM STU;




-- 3. 보너스+급여가 400 이하인 교수들의 이름, 아이디, 학과명을 출력하시오.
SELECT NAME, ID, PAY, BONUS, DNAME
FROM PROFESSOR P
INNER JOIN DEPARTMENT D ON P.DEPTNO = D.DEPTNO
WHERE PAY + NVL(BONUS, 0) < 400;




-- 4. 담당 학생이 2명이상인 교수의 이름, 아이디, 담당학생 수를 출력하시오.
SELECT *
FROM STU;

SELECT *
FROM PROFESSOR;

SELECT *
FROM STU S
INNER JOIN PROFESSOR P ON S.PROFNO = P.PROFNO;

SELECT NAME, ID, CNT
FROM PROFESSOR P
INNER JOIN (
    SELECT P.PROFNO, COUNT(*) AS CNT
    FROM PROFESSOR P
    INNER JOIN STU S ON S.PROFNO = P.PROFNO
    GROUP BY P.PROFNO
    HAVING COUNT(*) >= 2
) T ON P.PROFNO = T.PROFNO;







